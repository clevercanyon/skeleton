#!/usr/bin/env node
/**
 * Dotfiles updater.
 *
 * @note PLEASE DO NOT EDIT THIS FILE!
 * This entire file will be updated automatically.
 * - Instead of editing here, please review <https://github.com/clevercanyon/skeleton>.
 */
/* eslint-env es2021, node */

import chalk  from 'chalk';
import desm   from 'desm';
import crypto from 'node:crypto';
import fsp    from 'node:fs/promises';
import os     from 'node:os';
import path   from 'node:path';
import spawn  from 'spawn-please';

( async () => {
	/**
	 * Initializes vars.
	 */
	const __dirname = desm( import.meta.url );
	const projDir   = path.resolve( __dirname, '../../..' );

	/**
	 * Validates environment vars.
	 */
	if ( ! process.env.C10N_GITHUB_TOKEN ) {
		throw new Error( '`C10N_GITHUB_TOKEN` is a required environment variable.' );
	}

	/**
	 * Creates temp directory.
	 */
	const tmpDir = await fsp.mkdtemp( path.resolve( os.tmpdir(), './' + crypto.randomUUID() ) );

	/**
	 * Downloads latest skeleton.
	 */
	const skeletonRepoURL = 'https://' +
		( process.env.C10N_GITHUB_TOKEN || '' ) +
		'@github.com/clevercanyon/skeleton';
	await spawn( 'git', [ 'clone', '--depth=1', skeletonRepoURL, tmpDir ], {
		cwd    : projDir, // Displays output while running.
		stdout : ( buffer ) => console.log( chalk.blue( buffer.toString() ) ),
		stderr : ( buffer ) => console.log( chalk.red( buffer.toString() ) ),
	} );
	await fsp.rm( path.resolve( tmpDir, './.git' ), { recursive : true, force : true } );

	/**
	 * Runs `npm ci` in latest skeleton directory.
	 */
	await spawn( 'npm', [ 'ci', '--include=dev' ], {
		cwd    : tmpDir, // Displays output while running.
		stdout : ( buffer ) => console.log( chalk.blue( buffer.toString() ) ),
		stderr : ( buffer ) => console.log( chalk.red( buffer.toString() ) ),
	} );

	/**
	 * Runs updater using files from latest skeleton.
	 */
	await ( await import( path.resolve( tmpDir, './dev/.files/bin/updater/index.js' ) ) ).default( { projDir } );

	/**
	 * Removes tmp directory.
	 */
	await fsp.rm( tmpDir, { recursive : true, force : true } );
} )();
