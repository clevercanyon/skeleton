/**
 * Extensions.
 *
 * @note PLEASE DO NOT EDIT THIS FILE!
 * @note This entire file will be updated automatically.
 * @note Instead of editing here, please review <https://github.com/clevercanyon/skeleton>.
 */

import { $obj, $path } from '../../../../node_modules/@clevercanyon/utilities/dist/index.js';

/**
 * Adds leading dot to extensions.
 *
 * @param   exts Array of extensions.
 *
 * @returns      Array of extensions (with dot).
 */
const dot = (exts) => noDot(exts).map((ext) => '.' + ext);

/**
 * Strips leading dot from extensions.
 *
 * @param   exts Array of extensions.
 *
 * @returns      Array of extensions (not dot).
 */
const noDot = (exts) => [...new Set(exts)].map((ext) => ext.replace(/^\./u, ''));

/**
 * Converts an array of extensions into a braced glob.
 *
 * @param   exts Array of extensions.
 *
 * @returns      Extensions as a braced glob.
 *
 * @note Donâ€™t use `{}` braces in TypeScript config files; i.e., incompatible.
 */
const asBracedGlob = (exts) => {
    exts = [...new Set(exts)]; // Unique.
    return (exts.length > 1 ? '{' : '') + noDot(exts).join(',') + (exts.length > 1 ? '}' : '');
};

/**
 * Converts an array of extensions into no-brace globstars.
 *
 * @param   exts Array of extensions.
 *
 * @returns      Extensions as no-brace globstars.
 */
const asNoBraceGlobstars = (exts) => {
    return noDot(exts).map((ext) => '**/*.' + ext);
};

/**
 * Converts an array of extensions into a regular expression fragment.
 *
 * @param   exts Array of extensions.
 *
 * @returns      Extensions as a regular expression fragment.
 */
const asRegExpFrag = (exts) => {
    exts = [...new Set(exts)]; // Unique.
    return (exts.length > 1 ? '(?:' : '') + noDot(exts).join('|') + (exts.length > 1 ? ')' : '');
};

/**
 * Defines extensions.
 */
const extensions = {
    /**
     * Utilities.
     */
    dot,
    noDot,
    asBracedGlob,
    asNoBraceGlobstars,
    asRegExpFrag,

    /**
     * Canonical extensions.
     */
    can: $obj.map($path.jsTSExtsByDevGroup(), (exts) => dot(exts)),

    /**
     * VS Code lang extensions (camelCase).
     */
    vsc: $obj.map($path.extsByVSCodeLang({camelCase: true}), (exts) => dot(exts)),

    /**
     * Dev group extensions.
     */
    dev: $obj.map($path.jsTSExtsByDevGroup(), (exts) => dot(exts)),
};

/**
 * Content (tailwind).
 */
extensions.tailwindContent = [
    ...new Set([
        ...extensions.vsc.mdx,
        ...extensions.vsc.markdown,
        ...extensions.vsc.html,

        ...extensions.vsc.php,
        ...extensions.vsc.asp,
        ...extensions.vsc.ruby,
        ...extensions.vsc.python,
        ...extensions.vsc.perl,
        ...extensions.vsc.shellscript,

        ...extensions.dev.allJavaScript,
        ...extensions.dev.allTypeScript,

        ...extensions.vsc.xml, // e.g., SVGs.
    ]),
];
extensions.tailwindPrettierContent = [...extensions.tailwindContent];

/**
 * Content (comment anchors).
 */
extensions.commentAnchorsContent = [...extensions.tailwindContent];

/**
 * Extensions to try on import w/o extension.
 */
extensions.onImportWithNoExtensionTry = [...extensions.dev.allTypeScript, ...extensions.dev.allJavaScript];

/**
 * Default export.
 */
export default extensions;
