#!/usr/bin/env node
/**
 * TypeScript config file.
 *
 * TypeScript is not aware of this config file's location.
 *
 * The underlying `../../../../tsconfig.json` file can be recompiled using:
 *
 *     $ madrun update tsconfig
 *     or: $ madrun update dotfiles
 *
 * The underlying `../../../../tsconfig.json` file can be tested using:
 *
 *     $ npx tsc --showConfig
 *     $ npx tsc --emitDeclarationOnly --explainFiles
 *
 * @note PLEASE DO NOT EDIT THIS FILE!
 * @note This entire file will be updated automatically.
 * @note Instead of editing here, please review <https://github.com/clevercanyon/skeleton>.
 *
 * @see https://www.typescriptlang.org/tsconfig
 * @see https://www.typescriptlang.org/docs/handbook/module-resolution.html
 * @see https://vitejs.dev/guide/features.html#typescript-compiler-options
 */

import path from 'node:path';
import u from '../../resources/utilities.mjs';

/**
 * Defines TypeScript configuration.
 */
export default async () => {
    /**
     * Prepares relative import aliases.
     */
    const relativeImportAliases = {}; // Initialize.
    for (const [aliasPath, realPath] of Object.entries(await u.importAliases.asGlobs())) {
        let realRelativePath = path.relative(u.srcDir, realPath); // i.e., Relative to `compilerOptions.baseUrl`.
        relativeImportAliases[aliasPath] = [realRelativePath.startsWith('.') ? realRelativePath : './' + realRelativePath];
    }
    /**
     * Base config.
     */
    const baseConfig = {
        include: [
            './' + path.relative(u.projDir, u.srcDir) + '/**/*', //
            './' + path.relative(u.projDir, path.resolve(u.projDir, './dev-types.d.ts')),
        ],
        exclude: u.exclusions.asRelativeGlobs(u.projDir, [
            ...new Set(
                [
                    ...u.exclusions.localIgnores,
                    ...u.exclusions.logIgnores,
                    ...u.exclusions.backupIgnores,
                    ...u.exclusions.patchIgnores,
                    ...u.exclusions.editorIgnores,
                    ...u.exclusions.toolingIgnores,
                    ...u.exclusions.pkgIgnores,
                    ...u.exclusions.vcsIgnores,
                    ...u.exclusions.osIgnores,
                    ...u.exclusions.dotIgnores,
                    ...u.exclusions.configIgnores,
                    ...u.exclusions.lockIgnores,
                    ...u.exclusions.devIgnores,
                    ...u.exclusions.distIgnores,
                    ...u.exclusions.docIgnores,
                ].filter((excl) => '**/dev-types.d.ts/**' !== excl),
            ),
        ]),
        compilerOptions: {
            noEmit: true,
            declaration: true,
            declarationMap: false,

            baseUrl: './' + path.relative(u.projDir, u.srcDir),
            rootDir: './' + path.relative(u.projDir, u.srcDir),

            outDir: './' + path.relative(u.projDir, path.resolve(u.projDir, './dist')),
            declarationDir: './' + path.relative(u.projDir, path.resolve(u.projDir, './dist/types')),

            strict: true,
            skipLibCheck: true,

            target: u.esVersion.lcnYear,
            lib: [u.esVersion.lcnYear],
            types: [
                'vite/client', // Ambient modules provided by Vite build system.
                'unplugin-icons/types/preact', // Ambient modules for preact icons.
                '@types/mdx', // Ambient modules for MDX imports.

                'dayjs/plugin/advancedFormat', // DayJS types.
                'dayjs/plugin/customParseFormat',
                'dayjs/plugin/localizedFormat',
                'dayjs/plugin/relativeTime',
                'dayjs/plugin/timezone',
                'dayjs/plugin/toObject',
                'dayjs/plugin/utc',
            ],
            jsx: 'react-jsx',
            jsxImportSource: 'preact',

            module: 'node16',
            moduleResolution: 'node16',

            esModuleInterop: true,
            isolatedModules: true,
            resolveJsonModule: true,
            noErrorTruncation: true,
            verbatimModuleSyntax: true,
            allowImportingTsExtensions: true,

            paths: relativeImportAliases, // Relative to `baseUrl`.
        },
        // This is needed by the VSCode extension for MDX.
        mdx: (await (await import(path.resolve(u.projDir, './mdx.config.mjs'))).default()).vsCodeTSConfig,
    };

    /**
     * Composition.
     */
    return { ...baseConfig };
};
