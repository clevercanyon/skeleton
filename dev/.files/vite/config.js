/**
 * Vite config file.
 *
 * @since 1.0.0
 *
 * @note Vite is not aware of this config file's location.
 *
 * @see https://vitejs.dev/config/
 *
 * @note PLEASE DO NOT EDIT THIS FILE!
 * This entire file will be updated automatically.
 * - Instead of editing here, please review <https://github.com/clevercanyon/skeleton>.
 */
/* eslint-env es2021, node */

import desm                           from 'desm';
import path                           from 'path';
import glob                           from 'glob';
import { loadEnv }                    from 'vite';
import fs                             from 'fs-extra';
import prettier                       from 'prettier';
import minimatch                      from 'minimatch';
import aliases                        from './includes/aliases';
import mc                             from '@clevercanyon/js-object-mc';
import pluginBasicSSL                 from '@vitejs/plugin-basic-ssl';
import { ViteEjsPlugin as pluginEJS } from 'vite-plugin-ejs';

export default async ( { mode } /* { command, mode, ssrBuild } */ ) => {
	/**
	 * Initializes vars.
	 */
	const __dirname = desm( import.meta.url );
	const projDir   = path.resolve( __dirname, '../../..' );
	const srcDir    = path.resolve( __dirname, '../../../src' );
	const envsDir   = path.resolve( __dirname, '../../../src/.envs' );

	const publicEnvPrefix = 'APP_PUBLIC_'; // Used below also.
	const env             = loadEnv( mode, envsDir, publicEnvPrefix );

	const pkgFile        = path.resolve( projDir, './package.json' );
	const pkg            = await fs.readJson( pkgFile ); // JSON object props.
	const pkgPrettierCfg = { ...( await prettier.resolveConfig( pkgFile ) ), parser : 'json' };

	let libName = ( pkg.name || '' ).toLowerCase();
	libName     = libName.replace( /\bclevercanyon\b/ug, 'c10n' );
	libName     = libName.replace( /@/ug, '' ).replace( /\./ug, '-' ).replace( /\/+/ug, '.' );
	libName     = libName.replace( /[^a-z.0-9]([^.])/ug, ( m0, m1 ) => m1.toUpperCase() );
	libName     = libName.replace( /^\.|\.$/u, '' );

	const libIndexes   = glob.sync( path.join( srcDir, '/index{,-*,.*}.{tsx,ts,jsx,mjs,js,cjs}' ), { nodir : true } );
	const libMainIndex = libIndexes.find( ( libIndex ) => minimatch( libIndex, 'index.{tsx,ts,jsx,mjs,js,cjs}', { matchBase : true } ) );
	libIndexes.map( absPath => './' + path.relative( srcDir, absPath ) ); // Relative to `root` dir (i.e., `srcDir`).

	let isLib = false; // Initialize.
	if ( libName && libIndexes.length && libMainIndex ) {
		isLib = /^export\s/um.test( await fs.readFile( path.resolve( srcDir, libMainIndex ), 'utf8' ) );
	}
	/**
	 * Updates `package.json` accordingly.
	 */
	pkg.exports = pkg.exports || {};
	pkg.exports[ '.' ] = pkg.exports[ '.' ] || {};

	if ( isLib && 1 === libIndexes.length ) {
		mc.patch( pkg.exports, {
			'.' : {
				import  : './dist/index.js',
				require : './dist/index.umd.cjs',
			},
		} );
		pkg.module = './dist/index.js';
		pkg.main   = './dist/index.umd.cjs';
		pkg.types  = './dist/types/index.d.ts';
	} else if ( isLib && libIndexes.length > 1 ) {
		mc.patch( pkg.exports, {
			'.' : {
				import  : './dist/index.js',
				require : './dist/index.cjs',
			},
		} );
		pkg.module = './dist/index.js';
		pkg.main   = './dist/index.cjs';
		pkg.types  = './dist/types/index.d.ts';
	} else if ( ! isLib || ( isLib && 0 === libIndexes ) ) {
		pkg.module = pkg.main = pkg.types = '';
		mc.patch( pkg.exports, { '.' : { import : '', require : '' } } );
	}
	await fs.writeFile( pkgFile, prettier.format( JSON.stringify( pkg, null, 4 ), pkgPrettierCfg ) );

	/**
	 * Returns Vite config object data.
	 */
	return {
		c10n      : { // Expose these.
			aliases, projDir, srcDir, env, pkg,
			isLib, libName, libIndexes, libMainIndex,
		},
		root      : srcDir, // Absolute; where entry indexes live.
		publicDir : './public', // Static assets relative to `root`.
		base      : '/', // Analagous to `<base href="/">`.

		appType : 'custom', // <https://vitejs.dev/config/shared-options.html#apptype>
		resolve : { alias : aliases }, // See also: `../typescript/config.json`.

		envDir    : './' + path.relative( srcDir, envsDir ), // Where `.env` files live. Relative to `root`.
		envPrefix : publicEnvPrefix, // Part of app; i.e., visible client-side.

		build   : {         // <https://vitejs.dev/config/build-options.html>
			emptyOutDir : true, // Start clean. Must set as `true` explicitly.
			sourcemap   : false, // Enable to produce sourcemaps.

			target : 'es2021', // Match our typescript config.

			outDir    : '../dist', // Relative to `root`.
			assetsDir : './assets/a19s', // Relative to `outDir`.
			// `a19s` = numeronym for 'auto-generated assets'.

			...( isLib ? {
				lib : {
					name  : libName,      // Global variable.
					entry : libIndexes, // Relative to `root`.
				},
			} : {} ),
			rollupOptions            : {
				output : {
					extend         : true,
					noConflict     : true, // â†“ Modifies default CSS asset filename.
					assetFileNames : ( a ) => 'style.css' === a.name ? 'styles.css' : a.name,
				},
			},
			commonjsOptions          : {},
			dynamicImportVarsOptions : {},
		},
		define  : {
			$$__APP_PKG_NAME__$$    : pkg.name || '',
			$$__APP_PKG_VERSION__$$ : pkg.version || '',
			$$__APP_PKG_REPO__$$    : pkg.repository || '',
		},
		server  : { open : true, https : true },
		plugins : [ pluginBasicSSL(), pluginEJS( { env, pkg }, { root : srcDir } ) ],
	};
};
